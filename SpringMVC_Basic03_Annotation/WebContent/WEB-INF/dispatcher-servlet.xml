<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">
<!--  
xml 파일
IOC 컨테이너에 적재될 bean 객체 생성과 injection (DI)
-->
<!-- 
	의존 관계에 필요한 빈 객체 자동 생성
	@Autowired , @Resource 동작하기 위한 빈객체 .....
	
	**** <context:component-scan base-package="com.controller" /> *****
	선언부에 있으면
	@Component
	@Repository
	@Service
	@Controller
	
	annotation 을 가진 class 에 대해서 
	<bean id=""> 별도로 생성할 필요 없다
	자동으로 빈 객체 생성 됩니다 
	***********************************************
 -->
 <!-- 얘가 있어야 autowired, resource 같은 애들이 자동으로 실행됨  -->
 <context:annotation-config />
 <!-- 공통빈 -->
 <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	    	<property name="prefix">
	    		<value>/WEB-INF/views/</value>
	    	</property>
	    	<property name="suffix">
	    		<value>.jsp</value>
	    	</property>
 </bean>

<!-- TEST_1 -->  <!-- id값 의미없음. 안줘도됨  -->
   <bean id="helloController" class="com.controller.HelloController"></bean>
   
  
   <!-- TEST_2 하나의 요청 주소를 가지고, 전송방식으로 구분 : GET / POST  
   전제조건 : 요청 주소는 같다.-->
 
 	<bean class="com.controller.NewArticleController"></bean>
 	<bean class="com.service.ArticleService"></bean>
 	
 	
 	<!-- TEST_3 List<Item> 설정-->
 	<bean class="com.controller.OrderController"></bean>
 	
 	<!-- TEST_4 parameter 설정하기 연습 (@RequestParam)-->
 	<bean class="com.controller.SearchController"></bean>
 	
 	<!-- Test_5 @CookieValue 사용하기 -->
 	<bean class="com.controller.CookieController"></bean>
 	
 	<!-- Test_6 파일 업로드 
 	
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

 	CommonMultipartFile을 사용하기 위해서는 CommonsMultipartResolver 객체가 IOC 컨테이너 안에 bean객체로 생성되어 있어야함 
 	
 	CommonsMultipartResolver : 업로드 한 파일에 대한 정보관리 (크기, 이름..)
 	근데, 얘는 의존객체가 필요해요  (반드시!!!!!!!!!!!!!!!!!!!)
 	com.springsource.org.apache.commons.fileupload-1.2.0.jar
 	com.springsource.org.apache.commons.io-1.4.0.jar
 	 이 둘이 의존객체로 lib안에 추가되어있어야함 
 	 
-->

	<bean class="com.controller.ImageController"></bean>
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760"></property>  <!-- 10485760 = 10M -->
	</bean>
	
</beans> 


