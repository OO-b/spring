<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans.xsd">
	   
<!--  
	   Spring Was처럼 자신만의 '컨테이너(스프링 전용 메모리 공간)'를 제공( called : IOC )
	       이 안에 '객체를 만들고, 조립 (관계를 맺게해서 의존성을 줌) 설정 
	       
	       > DIConfig.xml 문서를 read해서 안에있는 코드를 먼저 실행 
	       > xml 파일은 컨테이너를 구성하는 객체를 생성하고, 의존을 설정하는 파일 
	       
	         -  xml 파일은 프로그램이 시작되면 제일먼저 읽어짐 . 컨테이너가 만들어지면 객체를 컨테이너 위에 올려놓아야하는데, 그 안에 관계는 xml이 함. 즉 관계의 근거가 됨 ( like 환경설정 파일)
	             
	                    또는  Annotation 통해서 컨테이너 자원 구성
	                    
	        : 제어의 역전 ( 프로그램의 제어구조를 바꾼다.)
	        : 작은 단위의 부품을 만들어 놓고, 그것을 조립하는 행위 (레고블럭 만드는것 처럼)
	        
	        
	        //JavaCode 
	        NewRecordView view = new NewRecordView(); // 객체 생성
	        NewRecord record = new NewRecord();
	        
	        view.setRecord(record); // 객체 주입
	        
	        //setter로 하는 주입 
       	        이렇게 프로그램이 짜여져있어야 위에처럼 쓸 수 잇음
	        public void setRecord(Record record) {  
		      this.record = (NewRecord) record; 
	     	}
	     	
	     	
	                 위와같은 형태의 코드를 자바코드가 아닌 '설정(Annotation or xml)'을 통해서 작업
	                 
	                 
	      public static void main(String[] args) {
		   NewRecordView view = new NewRecordView();
		
		   //필요하다면 
		   NewRecord record = new NewRecord();
		   view.setRecord(record);  // 주입. 필요한 객체의 주소를 삽입(주입)
		   view.input();
		   view.print();
	       }
	       
	       
	       ** <property name은 setter를 구현하고 있는 member field의 이름을 사용하는 것 
	       setRecord()를 구현하는 멤버필드는 private NewRecord record;
	    -->
	    
	    <!-- 클래스에서 만들어지는 객체를 xml에서 하겠다.  -->
	    <bean id="record" class="Spring_DI4.NewRecord"></bean>
	    <!-- NewRecord record = new NewRecord(); -->
	    <bean id="view" class="Spring_DI4.NewRecordView">
	    	<property name="record" ref="record"></property>
	    	<!-- 프로퍼티 네임값은 세터를 구현하고있는 멤버필드값을 넣는것 / 프로퍼티가 세터를 가리키는 것  ref에는 id값을 주입-->
	    	<!--  setter로 주입하면 property / 생성자로 주입하면 Constructor -->
	    </bean>
	    <!-- NewRecordView view = new NewRecordView() -->
</beans>

<!--  beans : 자바객체들  -->